{"componentChunkName":"component---src-templates-blog-template-index-js","path":"/box-shadow-e-suas-magicas","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Box shadow e suas mágicas","path":"/box-shadow-e-suas-magicas"},"html":"<center><img src=\"/images/cssocker.jpg\" alt=\"CsSocker\" /></center>\n<p>Se você acompanha minhas postagens no twitter ou facebook, com certeza já ouviu falar de um joguinho que estou desenvolvendo apenas com css, onde nenhuma imagem será utilizada e nenhuma linha de javascript no código fonte será encontrada (apenas o do Google Analytics, claro :p).</p>\n<h2>A propriedade box-shadow</h2>\n<p>Uma das \"pseudo class\" css que mais gosto e uso muito é a do estado de <span>:hover</span> e quando comecei a estudar a fundo a propriedade <span>box-shadow</span>, esses dois se incaixaram perfeitamente.</p>\n<p>Abaixo temos um exemplo bastante simples de como usar essas duas obras de artes:</p>\n<style>\n    .btn-simple {\n        width: 100px;\n        height: 100px;\n        margin: 30px auto;\n        text-align: center;\n        background: #2e9fff;\n        border-radius: 4px;\n        line-height: 100px;\n        cursor: pointer;\n        color: #fff;\n    }\n\n    .trs-5 {\n        -webkit-transition:all cubic-bezier(0.25, 0.1, 0.23, 0.79) 0.5s, box-shadow cubic-bezier(0.25, 0.1, 0.23, 0.79) 0.5s;\n        -moz-transition:all cubic-bezier(0.25, 0.1, 0.23, 0.79) 0.5s, box-shadow cubic-bezier(0.25, 0.1, 0.23, 0.79) 0.5s;\n        -ms-transition:all cubic-bezier(0.25, 0.1, 0.23, 0.79) 0.5s, box-shadow cubic-bezier(0.25, 0.1, 0.23, 0.79) 0.5s;\n        -o-transition:all cubic-bezier(0.25, 0.1, 0.23, 0.79) 0.5s, box-shadow cubic-bezier(0.25, 0.1, 0.23, 0.79) 0.5s;\n        transition:all cubic-bezier(0.25, 0.1, 0.23, 0.79) 0.5s, box-shadow cubic-bezier(0.25, 0.1, 0.23, 0.79) 0.5s;\n    }\n\n    #on-side {\n        box-shadow:inset 0 0 0 #00DFFF;\n    }\n\n    #on-side:hover {\n        -webkit-transform:scale(1.2);\n        -ms-transform:scale(1.2);\n        -o-transform:scale(1.2);\n        -moz-transform:scale(1.2);\n        transform:scale(1.2);\n        box-shadow:inset 0 -100px 0 0 #00DFFF, 0 8px 6px -6px #000;\n    }\n</style>\n<div class=\"btn-simple trs-5\" id=\"on-side\">Hover-me</div>\n<h2>O Problema</h2>\n<p>Após descobrir que para chegar ao resultado como o botão à cima, vários dev's param e partem para aprender outras propriedades css, não se aprofundam em cada propriedade especifica, seu conhecimento sempre é superficial, por isso geralmente costumo dizer que ninguém sabe css, pois é fácil de mais.</p>\n<p>Para perceber algumas mágicas do box-shadow, vamos voltar um pouco no tempo...</p>\n<h2>O tempo de agência</h2>\n<p>Lembra daquele tempo que você recebia os layouts malucos que o design fazia no photoshop em que o conteudo sempre iria ter dois bg's que nunca se alinhavam em grid nenhum? Se não entendeu, veja a figura abaixo</p>\n<center><img src=\"/images/layout-maluco.jpg\" alt=\"Layout Maluco\" /><br>**Figura 1:** Layout maluco</center>\n<p>Agora lhe pergunto oque você fária para chegar a este resultado? Adicionaria uma div com <span>position: absolute</span>, né espertinho? Podemos chegar ao mesmo resultado com um html e css bem mais enxuto adicionando apenas um box-shadow e aumentando o padding do elemento:</p>\n<center><img src=\"/images/layout-maluco2.jpg\" alt=\"Layout Maluco\" /><br>**Figura 2:** Layout maluco um pouco mais elegante</center>\n<deckgo-highlight-code html   highlight-lines=\"\">\n          <code slot=\"code\">&lt;h1 class=&quot;banner&quot;&gt;Meu layout maluco&lt;/h1&gt;\n&lt;div class=&quot;content-crazy&quot;&gt;\n  &lt;h2&gt;Layout Maluco&lt;/h2&gt;\n  &lt;br /&gt;\n  &lt;p&gt;\n    It is a long established fact that a reader will be distracted by the\n    readable content of a page when looking at its layout. The point of using\n    Lorem Ipsum is that it has a more-or-less normal distribution of letters, as\n    opposed to using &#39;Content here, content here&#39;, making it look like readable\n    English. Many desktop publis\n  &lt;/p&gt;\n&lt;/div&gt;</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code css   highlight-lines=\"\">\n          <code slot=\"code\">.content-crazy {\n  (...)padding: 2em 20em 4em 32em;\n  box-shadow: inset 470px 0 #2eb983;\n}</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>Perceba que acrescentamos apenas duas linhas no css.</p>\n</blockquote>\n<h2>Dúplicar formas</h2>\n<p>Outra técnica bastante \"show\", é a possibilidade de dúplicar elementos apartir da sua forma original. Um exemplo bem objetivo é as nuvens do CsSocker, onde desenho um círculo e dúplico o mesmo para que as suas réplicas formem uma nuvem.</p>\n<p>Abaixo 3 simples passos para formar uma nuvem pequena:</p>\n<style type=\"text/css\">\n    .circle {\n        background: #2e9fff;\n        width: 100px;\n        height: 100px;\n        border-radius: 100%;\n        margin: 30px auto;\n    }\n</style>\n<div class=\"circle\">\n</div>\n<center>**Figura 3:** Circulo\n</center>\n<p>Replicando com a propriedade box-shadow podemos chegar a uma nuvem amigável:</p>\n<style>\n    .shadow {\n        box-shadow: 63px -14px 0 #2e9fff;\n        -webkit-transform: translateX(-70px);\n        -moz-transform: translateX(-70px);\n        -ms-transform: translateX(-70px);\n        -o-transform: translateX(-70px);\n        transform: translateX(-70px);\n    }\n</style>\n<div class=\"circle shadow\">\n</div>\n<center>**Figura 4:** Circulos formando uma nuvem\n</center>\n<br />\n<style>\n    .nuvem {\n        box-shadow:63px -14px 0 #2e9fff, 123px 0px 0 #2e9fff, 63px 10px 0 #2e9fff;\n        -webkit-transform: translateX(-70px);\n        -moz-transform: translateX(-70px);\n        -ms-transform: translateX(-70px);\n        -o-transform: translateX(-70px);\n        transform: translateX(-70px);\n    }\n</style>\n<div class=\"circle nuvem\">\n</div>\n<center>**Figura 5:** Nuvem formada a partir de box-shadow\n</center>\n<blockquote>\n<p>Muitos elementos do CsSocker foram feitos a partir desta técnica de réplicação, como exemplo temos também as cercas do campo que estão por trás das barras.</p>\n</blockquote>\n<p>Um exemplo fantástico é a<a href=\"https://codepen.io/jaysalvat/pen/HaqBf\"> monaliza em css</a>, que foi feito a partir de um conversor de imagens para css. Note que os traços gerados da pintura, foram todos criados por meio do <span>box-shadow</span></p>\n<p>Seguindo este conceito, podemos chegar a resultados incríveis... É só usar a imaginação!</p>\n<p>Sobre o CsSocker, eu ainda não terminei mas irei criar vários posts relacionados a ele e ao desenvolvimento de jogos com css ;)</p>\n<p><em>Fiquem ligados!! (y)</em></p>"}},"pageContext":{}},"staticQueryHashes":[]}