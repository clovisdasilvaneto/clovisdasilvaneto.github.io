{"componentChunkName":"component---src-templates-blog-template-index-js","path":"/criando-componentes-apenas-com-css","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Criando componentes apenas com css","path":"/criando-componentes-apenas-com-css"},"html":"<p>No dia 20 de abril, realizei uma talk bem descontraída sobre <a href=\"http://slides.com/clovisneto/deck#/1\">Componentização com CSS na ThoughtWorks em Recife/PE</a>, não pude deixar de notar que a forma de como esta técnica facilita o desenvolvimento e ajuda na peformance, chamou a atênção de muitos dev's. Resolvi deixar algumas considerações finais sobre <em><strong>componentização com css</strong></em></p>\n<h2>Uma breve introdução</h2>\n<p>Apesar de ser desenvolvedor web, sempre fui um carinha apaixonado por front end, principalmente quando o assunto é relacionado à algum efeito Top of the Master.</p>\n<p>Me recordo do primeiro desenho que vi com css foi o de <a href=\"http://bernarddeluna.com/\">Bernad de Luna</a>, quando ele desenhou o <a href=\"http://bernarddeluna.com/project/pure-css-homer/\">Homer Simpsons</a> apenas com css. Depois veio <a href=\"https://www.felipefialho.com/\">Felipe Fialho</a> e fez um teclado, xadrez e um personagem de jogo de video game (não me recordo do nome... até na talk eu esqueci ¬¬').</p>\n<p>Depois de um tempo brincando com desenhos e outras coisas feitas apenas com css, notei como o css nos possibilita a criação de diversas formas, mas eu queria mais que isso. Eu sabia que isto não iria ajudar em soluções reais para projetos, logo comecei a imaginar como aplicar estas técnicas \"show\" nos meus projetos do dia-a-dia.</p>\n<h2>Conhecendo as técnicas</h2>\n<p>Nos meados de 2013~2014, estudando algumas propriedades do css, pude notar algo que me chamou atênção. Lembrei que existe uma propriedade específica para input's do tipo checkbox ou radio, então várias idéias começaram a brotar da minha mente.</p>\n<p>Imaginei que se eu posso prever uma ação de clique num campo especifico (claro o <span>:checked</span> existe para quando um campo for checado), eu posso ir muito além de criar simples formulários bonitinhos e estilizados. Então comecei a criar acordeons, dropdowns (só para esudo porque isto também é possivel com o <span>:hover</span>), galerias, modals, carroséis e etc...</p>\n<blockquote>\n<p>Vale lembrar que também podemos obter uma determinada ação de clique atravês do <span>:target</span></p>\n</blockquote>\n<p>Sempre costumo antes de criar algo <span>\"very fuck\"</span> com css, pensar em toda a lógica que será utilizada.</p>\n<center><img src=\"/images/logica.gif\" /></center>\n<h2>ãh? lógica com css???</h2>\n<p>Não, eu não pirei, shusahushua, imagine comigo, se você quer atribuir um estilo em um elemento quando uma determinada ação acontecer, como você faria? Usaria javascript?</p>\n<p>Porque não da uma chance para o nosso amigo css? Vamos pensar um pouco...</p>\n<h2>Criando o componente</h2>\n<p>Vejamos uma simples marcação html, com a estrutura de um modal:</p>\n<deckgo-highlight-code html   highlight-lines=\"\">\n          <code slot=\"code\">&lt;input type=&quot;checkbox&quot; id=&quot;modal&quot; hidden /&gt;\n&lt;label for=&quot;modal&quot;&gt;Teste-me&lt;/label&gt;\n\n&lt;article id=&quot;my-modal-content&quot;&gt;\n  &lt;header&gt;\n    &lt;h3&gt;Meu Modal&lt;/h3&gt;\n  &lt;/header&gt;\n\n  &lt;p&gt;You fuck man!&lt;/p&gt;\n&lt;/article&gt;</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>Note que escondemos o input com o atributo hidden do html</p>\n</blockquote>\n<p>Agora vamos aplicar um estilo básico:</p>\n<deckgo-highlight-code css   highlight-lines=\"\">\n          <code slot=\"code\">* {\n  margin: 0;\n  padding: 0;\n}\n\nlabel {\n  color: #fff;\n  display: inline-block;\n  padding: 10px;\n  background: blue;\n  cursor: pointer;\n}\n\n#my-modal-content {\n  position: absolute;\n  top: 30px;\n  margin-left: -200px;\n  left: 50%;\n  background-color: #fff;\n  width: 100%;\n  border: solid 1px #f3f3f3;\n  min-height: 170px;\n  max-width: 400px;\n  box-shadow: 2px 2px 3px rgba(204, 204, 204, 0.45);\n  border-radius: 5px;\n}\n\nh3 {\n  margin: 0;\n  padding: 13px 0 11px;\n  font-size: 24px;\n  border-bottom: solid 1px #f3f3f3;\n  font-weight: 300;\n}\n\np {\n  font-size: 18px;\n  padding-top: 20px;\n}\n\nh3,\np {\n  padding-left: 31px;\n}</code>\n        </deckgo-highlight-code>\n<p>logo o estilo do nosso modal ficaria desta forma:</p>\n<style>\n    #content-1 * { margin: 0; padding:0; }\n\n    #content-1 label {\n        cursor: pointer;\n        color:#fff;\n        display: inline-block;\n        padding:10px;\n        background: blue;\n    }\n\n    #content-1 .my-modal-content {\n        position: absolute!important;\n        top: -40px!important;\n        margin-left: -200px!important;\n        left: 50%!important;\n        background-color: #fff!important;\n        width: 100%!important;\n        border: solid 1px #f3f3f3!important;\n        min-height: 170px!important;\n        max-width: 400px!important;\n        -webkit-transition:ease-in-out all 0.5s!important;\n        -moz-transition:ease-in-out all 0.5s!important;\n        -ms-transition:ease-in-out all 0.5s!important;\n        -o-transition:ease-in-out all 0.5s!important;\n        transition:ease-in-out all 0.5s!important;\n        box-shadow: 2px 2px 3px rgba(204, 204, 204, 0.45)!important;\n        border-radius:5px!important;\n    }\n\n    #content-1 .my-modal-content h3 {\n        margin: 0!important;\n        padding: 13px 31px 11px!important;\n        font-size: 24px!important;\n        border-bottom: solid 1px #f3f3f3!important;\n        font-weight: 300!important;\n    }\n\n    #content-1 .my-modal-content p {\n        font-size: 18px!important;\n        padding-top: 20px!important;\n        padding-left: 31px!important;\n    }\n\n    #content-1 {\n        margin-top: 60px;\n        position: relative;\n        padding: 20px;\n        min-height: 200px;\n    }\n</style>\n<div id=\"content-1\">\n    <input type=\"checkbox\" id=\"modal\" hidden=\"\" />\n    <label for=\"modal\">Teste-me</label>\n    <div class=\"my-modal-content\">\n        <header>\n            <h3>Meu Modal</h3>\n        </header>\n        <p>You are the man!</p>\n    </div>\n</div>\n<p>Agora que tal estilizar os irmãos deste elemento apenas quando ele for checado?</p>\n<p>Existe uma propriedade css que nos possibilita selecionar os irmãos de um determinado elemento, que é o acento <span>~</span> (til).</p>\n<p>Colocarei um <span>opacity:0; visibility:hidden</span> no modal e uma transição para simular um efeito de fadeIn, para que fique escondido e com o pseudo elemento <span>:checked</span> faremos a mágicar acontecer!</p>\n<deckgo-highlight-code css   highlight-lines=\"\">\n          <code slot=\"code\">#my-modal-content {\n  (...)opacity: 0;\n  visibility: hidden;\n  -webkit-transition: ease-in-out all 0.5s;\n  -moz-transition: ease-in-out all 0.5s;\n  -ms-transition: ease-in-out all 0.5s;\n  -o-transition: ease-in-out all 0.5s;\n  transition: ease-in-out all 0.5s;\n}\n\ninput:checked ~ #my-modal-content {\n  opacity: 1;\n  visibility: visible;\n}</code>\n        </deckgo-highlight-code>\n<p>Teriamos um efeito parecido com este:</p>\n<style>\n    #modal-opened {\n        opacity: 0;\n        visibility: hidden;\n    }\n\n    input:checked ~ #modal-opened {\n        opacity:1;\n        visibility:visible;\n    }\n</style>\n<div id=\"content-1\">\n    <input type=\"checkbox\" id=\"modal2\" hidden=\"\" />\n    <label for=\"modal2\">Teste-me</label>\n    <div class=\"my-modal-content\" id=\"modal-opened\">\n        <header>\n            <h3>Meu Modal</h3>\n        </header>\n        <p>You are the man!</p>\n    </div>\n</div>\n<p>Perceba como foi simples, fácil, prático e peformático criar o nosso componente.</p>\n<center><img src=\"surprised.gif\" alt=\"surprised\" /></center>\n<h2>E a peformance?</h2>\n<p>Não vou me estender muito em questão de peformance para o post não ficar muito grande, mas só para você ter idéia, um site foi testado no <a href=\"https://gtmetrix.com/\">GTMetrix</a> antes de usar componentes apenas com css. Os valores obtidos foram os seguintes:</p>\n<ul>\n<li>Page load time: 1.26s</li>\n<li>Total page size: 197KB</li>\n<li>Total number of requests: 8</li>\n</ul>\n<p>Logo depois utilizamos componentes com css, embedamos o css e o carregamento dos icones foi descartado. Obtivemos os seguintes valores</p>\n<ul>\n<li>Page load time: 0.75s</li>\n<li>Total page size: 58.6KB</li>\n<li>Total number of requests: 5</li>\n</ul>\n<p>Um impacto de peformance bastante considerável pois simples ajustes que muitas vezes esquecemos de fazer, como diminuir requisições, podem causar um impacto muito maior na perfomance de um projeto.</p>\n<h2>Algumas fontes...</h2>\n<p>É sempre bom ter uma outra fonte de estudo. E como referência, não posso deixar de citar o site da <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements\">MDN (clique aqui)</a>. Também encontrei um post da hora no blog do <a href=\"https://www.felipefialho.com/\">Felipe Fialho (clique aqui)</a>.</p>\n<h2>Frameworks &#x3C;3</h2>\n<p>Não é bem componentização, mas engloba tudo... <a href=\"http://all-animation.github.io/\">All Animation CSS3</a> é uma lib que contém várias animações css3 que pode nos auxiliar no desenvolvimento dos nossos componentes com animações css muito da hora.</p>\n<p>\"A parte boa da coisa sempre fica por ultimo\", o Felipe Fialho (Fala felipão! já da pra cobrar pela citação do teu nome no post suhaushauha) criou o <a href=\"https://css-components.felipefialho.com/\">Pure CSS Components</a>, uma lib muito bacana que reúne uma série de elementos componentizados com css, que vai desde um simples modal até um carrosel. Recentemente ela foi ré-escrita com o stylus. Vale apena conferir.</p>\n<h3>Considerações Finais</h3>\n<p>Sem dúvida o css já nos ofereceu muito e ainda terá muiiiiito a nos oferecer, só basta usar a cabeça e por a criatividade em prática!</p>\n<p>É isso ai galera, um enorme abraço e até a próxima :D</p>"}},"pageContext":{}},"staticQueryHashes":[]}