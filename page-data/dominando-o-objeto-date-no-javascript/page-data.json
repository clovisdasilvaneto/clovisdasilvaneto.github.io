{"componentChunkName":"component---src-templates-blog-template-index-js","path":"/dominando-o-objeto-date-no-javascript","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Dominando o objeto date no javascript","path":"/dominando-o-objeto-date-no-javascript"},"html":"<h2>Um pouco de história</h2>\n<p><img src=\"/images/objeto-date.jpg\" alt=\"Hopper The Rabbit\"></p>\n<p>O objeto date é representado pela quantidade de milisegundos desde o início da <strong>Era Unix</strong></p>\n<p>A <strong>Era Unix</strong> (Unix Epoch), ou Posix Time, teve início no dia <strong>1 de janeiro de 1970</strong> às 00:00:00 do Tempo Universal Coordenado, mais conhecido como UTC, referência a partir de onde se calculam os fusos horários do mundo inteiro.</p>\n<p>Podemos obter a data atual, a partir da função construtora de Date, sem parâmetros. Ex:</p>\n<deckgo-highlight-code javascript   highlight-lines=\"\">\n          <code slot=\"code\">const today = new Date()\n\n// Sat Jun 13 2015 14:41:41 GMT-0300 (Hora oficial do Brasil)</code>\n        </deckgo-highlight-code>\n<p>Para observar a representação em milisegundos, desde à Era Unix até a variável today, escrevemos à seguinte propriedade: <span>today.getTime()</span>. Também podemos criar uma data, passando como parâmetro o tempo em milisegundos ou em ISOString. Ex:</p>\n<deckgo-highlight-code javascript   highlight-lines=\"\">\n          <code slot=\"code\">const today = new Date(1434217927281),\n  todayInISO = new Date(&quot;2015-06-13T17:50:25.057Z&quot;)</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>O cálculo da data, é feito a partir de UTC +- 00:00, conhecido como Z, abreviação de Zulu Time. Logo se colocarmos a data do dia em que se comemora o Natal(dia 25/12) em milisegundos receberíamos no console Wed Dec 24 2015 22:00:00 GMT-0200 (BRST), pois a hora do Brasil em relação ao Greenwich Mean Time, varia de 2 à 5 horas.</p>\n</blockquote>\n<h2>Alguns truques :D</h2>\n<p>No javascript, não é possível criar uma data a partir de uma máscara, mas existe a possibilidade de obter o tempo em milisegundos a partir desta máscara... Ex:</p>\n<deckgo-highlight-code javascript   highlight-lines=\"\">\n          <code slot=\"code\">// retorna 1434164400000\nconst today = Date.parse(&quot;2015/06/13&quot;)\n\n//Sat Jun 13 2015 00:00:00 GMT-0300 (Hora oficial do Brasil)\nnew Date(today)</code>\n        </deckgo-highlight-code>\n<p>Existe a forma de criar uma data passando a string como parâmetro neste formato: <span>mês/dia/ano</span>. Ex:</p>\n<deckgo-highlight-code javascript   highlight-lines=\"\">\n          <code slot=\"code\">//Thu Dec 25 2014 00:00:00 GMT-0300 (Hora oficial do Brasil)\nnew Date(&quot;12/25/2014&quot;)</code>\n        </deckgo-highlight-code>\n<p>Note que se colocassemos a string no formato <span>dia/mês/ano</span>, receberíamos a mensagem de erro: <span class=\"error\">\"Invalid Date\"</span>.</p>\n<blockquote>\n<p>Tenha cuidado, os formatos oficialmente aceitos como parâmetro são RFC 2822 e ISO 8601</p>\n</blockquote>\n<h2>Criando uma data passando como parâmetro uma String RFC 2822 e ISO 8601</h2>\n<p>O formato RFC 2822 é o que costumamos ver no toString de Date (Thu Dec 25 2014 00:00:00 GMT-0300 (BRT)), nós podemos criar uma data a partir dele, desta forma:</p>\n<deckgo-highlight-code javascript   highlight-lines=\"\">\n          <code slot=\"code\">new Date(&quot;Thu Dec 25 2014&quot;)\n\n//or\nnew Date(&quot;Thu Dec 25 2014 10:30:00&quot;)</code>\n        </deckgo-highlight-code>\n<p>Podemos criar a partir do ISO 8601, mas vale recitar que este formato é sensível à time zone, ex:</p>\n<deckgo-highlight-code javascript   highlight-lines=\"\">\n          <code slot=\"code\">//Wed Dec 24 2015 21:00:00 GMT-0300 (Hora oficial do Brasil)\nnew Date(&quot;2015-12-25&quot;)\n\n//or\n//Sat Dec 19 2015 07:30:00 GMT-0300 (Hora oficial do Brasil)\nnew Date(&quot;2015-12-19T10:30:00&quot;)</code>\n        </deckgo-highlight-code>\n<h2>Criando datas sem o timezone interferir</h2>\n<p>Observe que o time zone interferiu nas duas datas que criamos, até mesmo passando a hora em string. Para que isto não aconteça, podemos passar o time zone <span>-03:00</span> (no meu caso são 3 horas de atraso), dentro da nossa string... Ex:</p>\n<deckgo-highlight-code javascript   highlight-lines=\"\">\n          <code slot=\"code\">//Sat Dec 19 2015 10:30:00 GMT-0300 (Hora oficial do Brasil)\nnew Date(&quot;2015-12-19T10:30:00-03:00&quot;)</code>\n        </deckgo-highlight-code>\n<p>\"Mas desta forma eu terei que saber qual é o meu atraso em relação ao Meridiano de Greenwich\", é verdade, mas também existe outra forma de criar uma data sem especificar a time zone, <strong>passando a própria data como parâmetro</strong>. Ex:</p>\n<deckgo-highlight-code javascript   highlight-lines=\"\">\n          <code slot=\"code\">//Sat Jun 13 2015 00:00:00 GMT-0300 (Hora oficial do Brasil)\nnew Date(2015, 05, 13)\n\n//or\n//Sat Jun 13 2015 10:30:00 GMT-0300 (Hora oficial do Brasil)\nnew Date(2015, 05, 13, 10, 30, 0)</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>É importante ressaltar que o mês no objeto data, vai de 0 até 11, por isso o mês 05 não é maio e sim junho</p>\n</blockquote>\n<p>A partir do momento que criamos uma instância do objeto date, temos acesso a API do mesmo.</p>\n<h2>API</h2>\n<h3>getYear e getFullYear</h3>\n<p><strong>Cuidado!</strong> O javascript é uma linguagem criada na década de 90, então se queremos saber o ano atual devemos colocar <span>getFullYear()</span>. Ex:</p>\n<deckgo-highlight-code javascript   highlight-lines=\"\">\n          <code slot=\"code\">const today = new Date(&quot;2014-06-01&quot;)\n\n//2014\ntoday.getFullYear()\n\n//retorna a quantidade de anos\n//de 1990 até o ano especificado no parâmetro do new Date()\ntoday.getYear()</code>\n        </deckgo-highlight-code>\n<h3>getMonth</h3>\n<p>Lembra da nota que foi colocada agora pouco: \"É importante ressaltar que o mês no objeto data, vai de 0 até 11, por isso o mês 05 não é maio e sim junho\" ? O <span>getMonth()</span> nos retorna o mês de 0 à 11. Ex:</p>\n<deckgo-highlight-code javascript   highlight-lines=\"\">\n          <code slot=\"code\">//Sat May 09 2015 21:00:00 GMT-0300 (Hora oficial do Brasil)\nconst today = new Date(&quot;2015-05-10&quot;)\n\ntoday.getMonth() //4</code>\n        </deckgo-highlight-code>\n<h3>getDay e getDate</h3>\n<p>O <span>getDay()</span> retorna o dia da semana começando de 0, já o <span>getDate()</span> retorna o dia na data do calendário. Ex:</p>\n<deckgo-highlight-code javascript   highlight-lines=\"\">\n          <code slot=\"code\">const today = new Date(&quot;2015-05-10T10:03:00&quot;)\n\ntoday.getDay() //6\n\ntoday.getDate() //10</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>Cuidado com o time zone, pois dependendo do caso o <span>getDate()</span> pode vim um dia antes.</p>\n</blockquote>\n<p>Não vou me aprofundar muito na API do Date, para o post não ficar muito extenso, talvez eu crie um post só sobre o Date API, mas recomendo muuuuito como referência de estudo o <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">Mozilla Developer Network</a> que separa uma seção bastante interessante sobre o Date.</p>\n<p><em>Valeeeu :D</em></p>"}},"pageContext":{}},"staticQueryHashes":[]}